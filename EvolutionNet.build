<?xml version="1.0" encoding="utf-8"?>
<!--
**********************************
* Build File: EvolutionNet.build
**********************************
-->
<project name="EvolutionNet" default="build" xmlns="http://nant.sf.net/release/0.86-beta1/nant.xsd">
  <!-- Variáveis locais -->
  <property name="debug" value="false" overwrite="false" />
  <property name="envdir" value="release" />
  <property name="envdir" value="debug" if ="${debug}"/>
  <property name="target" value="2.0" overwrite="false" />
  <property name="deploy" value="deploy" overwrite="false" />

  <property name="src_path" value="src"/>
  <property name="src_path_util" value="src\util"/>
  <property name="src_path_mvp" value="src\mvp"/>
  <property name="lib_path" value="lib\${envdir}\${target}"/>

  <property name="build_path" value="build"/>
  <property name="build_path_util" value="${build_path}\util\${envdir}\${target}"/>
  <property name="build_path_mvp" value="${build_path}\mvp\${envdir}\${target}"/>

  <property name="bin_path" value="bin"/>
  <property name="bin_path_util" value="${bin_path}\util\${envdir}\${target}"/>
  <property name="bin_path_mvp" value="${bin_path}\mvp\${envdir}\${target}"/>
  <property name="bin_path_zip" value="${bin_path}\zip"/>

  <property name="version_util" value="${assemblyname::get-version(assemblyname::get-assembly-name(bin_path_util+'\EvolutionNet.Util.dll'))}" if="${file::exists(bin_path_util+'\EvolutionNet.Util.dll')}" />
  <property name="version_mvp" value="${assemblyname::get-version(assemblyname::get-assembly-name(bin_path_mvp+'\EvolutionNet.MVP.dll'))}" if="${file::exists(bin_path_mvp+'\EvolutionNet.MVP.dll')}" />

  <property name="deploy_path" value="${deploy}\${envdir}\${target}\EvolutionNet"/>


  <!-- ****** Target: delete ****** -->
  <target name="delete" description="delete build directory">
    
    <delete dir="${build_path}" if="${directory::exists(build_path)}" />
    
  </target>
  
  
  
  <!-- ****** Target: clean ****** -->
  <target name="clean" description="remove all binaries">

    <delete if="${directory::exists(bin_path_util)}">
      <fileset basedir="${bin_path_util}">
        <include name="**/*.*" />
      </fileset>
    </delete>
    <delete if="${directory::exists(bin_path_mvp)}">
      <fileset basedir="${bin_path_mvp}">
        <include name="**/*.*" />
      </fileset>
    </delete>
    <delete if="${directory::exists(bin_path_zip)}">
      <fileset basedir="${bin_path_zip}">
        <include name="**/*.*" />
      </fileset>
    </delete>
    
  </target>



  <!-- ****** Target: clean-deploy ****** -->
  <target name="clean-deploy" description="remove all build products">
    
    <delete>
      <fileset basedir="${deploy_path}">
        <include name="EvolutionNet*.dll" />
        <include name="EvolutionNet*.pdb" if="${debug}" />
      </fileset>
    </delete>
    
  </target>



  <!-- ****** Target: init ****** -->
  <target name="init">

    <mkdir dir="${build_path_util}" />
    <mkdir dir="${build_path_mvp}" />
    <mkdir dir="${bin_path_util}" />
    <mkdir dir="${bin_path_mvp}" />
    <mkdir dir="${bin_path_zip}" unless="${debug}" />
    
  </target>



  <!-- ****** Target: copy-libs-util ****** -->
  <target name="copy-libs-util" depends="init" >
    <copy todir="${build_path_util}" flatten="true">
      <fileset basedir="${lib_path}">
        <!--        <include name="Aforge\Aforge.Imaging.dll" />-->
      </fileset>
    </copy>
    <copy file="${lib_path}\castle\Castle.ActiveRecord.dll" todir="${build_path_mvp}" />

  </target>



  <!-- ****** Target: copy-libs-mvp ****** -->
  <target name="copy-libs-mvp" depends="init">

    <!-- ****** COPY LIB DLL's TO BUILD ****** -->
    <copy file="${lib_path}\castle\Castle.ActiveRecord.dll" todir="${build_path_mvp}" />
    <copy file="${lib_path}\castle\Castle.Core.dll" todir="${build_path_mvp}" />
    <copy file="${lib_path}\castle\Castle.MicroKernel.dll" todir="${build_path_mvp}" />
    <copy file="${lib_path}\castle\Castle.Windsor.dll" todir="${build_path_mvp}" />
    <copy file="${lib_path}\log4net\log4net.dll" todir="${build_path_mvp}" />

  </target>



  <!-- ****** Target: build-util ****** -->
  <target name="build-util" depends="copy-libs-util" description="Compiles the util libraries">

    <!-- ****** EvolutionNet.Util ****** -->
    <csc target="library" output="${build_path_util}\EvolutionNet.Util.dll" debug="${debug}" keyfile="${src_path}\EvolutionNet.snk" define="FRAMEWORK_${string::substring(target, 0, 1)}">
      <sources>
        <include name="${src_path_util}\EvolutionNet.Util\**\*.cs" />
      </sources>
      <resources dynamicprefix="true" basedir="${src_path_util}">
        <include name="EvolutionNet.Util\**\*.swf" />
      </resources>
      <references>
        <include name="${lib_path}\log4net\log4net.dll" />
      </references>
    </csc>

  </target>



  <!-- ****** Target: build-mvp ****** -->
  <target name="build-mvp" depends="copy-libs-mvp, build-util" description="Compiles the mvp libraries">

    <!-- ****** EvolutionNet.MVP ****** -->
    <csc target="library" output="${build_path_mvp}\EvolutionNet.MVP.dll" debug="${debug}" keyfile="${src_path}\EvolutionNet.snk" define="FRAMEWORK_${string::substring(target, 0, 1)}">
      <sources>
        <include name="${src_path_mvp}\EvolutionNet.MVP\**\*.cs" />
      </sources>
      <references>
        <include name="${lib_path}\castle\Castle.ActiveRecord.dll" />
        <include name="${lib_path}\castle\Castle.Core.dll" />
        <include name="${lib_path}\castle\Castle.MicroKernel.dll" />
        <include name="${lib_path}\castle\Castle.Windsor.dll" />
        <include name="${lib_path}\nhibernate\NHibernate.dll" />
        <include name="${lib_path}\log4net\log4net.dll" />
        
        <include name="${build_path_util}\EvolutionNet.Util.dll" />
      </references>
    </csc>

    <!-- ****** EvolutionNet.MVP.UI.Windows ****** -->
    <csc target="library" output="${build_path_mvp}\EvolutionNet.MVP.UI.Windows.dll" debug="${debug}" keyfile="${src_path}\EvolutionNet.snk" define="FRAMEWORK_${string::substring(target, 0, 1)}">
      <sources>
        <include name="${src_path_mvp}\EvolutionNet.MVP.UI.Windows\**\*.cs" />
        <exclude name="${src_path_mvp}\EvolutionNet.MVP.UI.Windows\**\AssemblyInfo.cs" />
        <include name="${src_path_mvp}\EvolutionNet.MVP\**\AssemblyInfo.cs" />
      </sources>
      <resources dynamicprefix="true" basedir="${src_path_mvp}">
        <include name="EvolutionNet.MVP.UI.Windows\**\*.resx" />
      </resources>
      <references>
        <include name="${lib_path}\log4net\log4net.dll" />

        <include name="${build_path_mvp}\EvolutionNet.MVP.dll" />
      </references>
    </csc>

    <!-- ****** EvolutionNet.MVP.UI.Web ****** -->
    <csc target="library" output="${build_path_mvp}\EvolutionNet.MVP.UI.Web.dll" debug="${debug}" keyfile="${src_path}\EvolutionNet.snk" define="FRAMEWORK_${string::substring(target, 0, 1)}">
      <sources>
        <include name="${src_path_mvp}\EvolutionNet.MVP.UI.Web\**\*.cs" />
        <exclude name="${src_path_mvp}\EvolutionNet.MVP.UI.Web\**\AssemblyInfo.cs" />
        <include name="${src_path_mvp}\EvolutionNet.MVP\**\AssemblyInfo.cs" />
      </sources>
      <references>
        <include name="${lib_path}\log4net\log4net.dll" />

        <include name="${build_path_mvp}\EvolutionNet.MVP.dll" />
      </references>
    </csc>

  </target>




  <!-- ****** Target: build ****** -->
  <target name="build" depends="build-mvp" />



  <!-- ****** Target: rebuild ****** -->
  <target name="rebuild" depends="delete, build"/>



  <!-- ****** Target: bin-util ****** -->
  <target name="bin-util" depends="build-util">

    <!-- ****** COPY DLL's TO BIN ****** -->
    <copy todir="${bin_path_util}" flatten="true">
      <fileset basedir="${build_path_util}">
        <include name="EvolutionNet.*.dll" />
        <include name="EvolutionNet.*.pdb" if="${debug}" />
      </fileset>
    </copy>

  </target>



  <!-- ****** Target: bin-mvp ****** -->
  <target name="bin-mvp" depends="build-mvp, bin-util">

    <!-- ****** COPY DLL's TO BIN ****** -->
    <copy todir="${bin_path_mvp}" flatten="true">
      <fileset basedir="${build_path_mvp}">
        <include name="EvolutionNet.MVP*.dll" />
        <include name="EvolutionNet.MVP*.pdb" if="${debug}" />
      </fileset>
    </copy>

  </target>

  
  
  <!-- ****** Target: bin ****** -->
  <target name="bin" depends="bin-mvp" />



  <!-- ****** Target: zip-util ****** -->
  <target name="zip-util" depends="bin-util" unless="${debug or target=='2.0'}">

    <delete if="${directory::exists('${bin_path_zip}')}">
      <fileset basedir="${bin_path_zip}">
        <include name="evolution-net-util*.zip" />
      </fileset>
    </delete>

    <zip zipfile="${bin_path_zip}\evolution-net-util-${version_util}-bin.zip">
      <fileset basedir="bin\util" prefix="">
        <include name="**/*.dll" />
        <exclude name="**/*.pdb"/>
      </fileset>
    </zip>

    <zip zipfile="${bin_path_zip}\evolution-net-util-${version_util}-src.zip">
      <fileset basedir="." prefix="">
        <include name="*.*" />
        <exclude name="*.txt" />
      </fileset>

      <fileset basedir="${src_path_util}" prefix="${src_path_util}">
        <include name="**/*" />

        <exclude name="log.txt" />
        <exclude name="**/bin/**/*" />
        <exclude name="**/obj/**/*" />
        <exclude name="**/*.suo" />
        <exclude name="**/*resharper*/**/*" />
        <exclude name="**/*resharper*" />
      </fileset>
    </zip>

  </target>



  <!-- ****** Target: zip-mvp ****** -->
  <target name="zip-mvp" depends="bin-mvp" unless="${debug or target=='2.0'}">

    <delete if="${directory::exists('${bin_path_zip}')}">
      <fileset basedir="${bin_path_zip}">
        <include name="evolution-net-mvp*.zip" />
      </fileset>
    </delete>

    <zip zipfile="${bin_path_zip}\evolution-net-mvp-${version_mvp}-bin.zip">
      <fileset basedir="bin\mvp" prefix="">
        <include name="**/*.dll" />
        <exclude name="**/*.pdb"/>
      </fileset>
    </zip>

    <zip zipfile="${bin_path_zip}\evolution-net-mvp-${version_mvp}-src.zip">
      <fileset basedir="." prefix="">
        <include name="*.*" />
        <exclude name="*.txt" />
      </fileset>

      <fileset basedir="${src_path_mvp}" prefix="${src_path_mvp}">
        <include name="**/*" />

        <exclude name="log.txt" />
        <exclude name="**/bin/**/*" />
        <exclude name="**/obj/**/*" />
        <exclude name="**/*.suo" />
        <exclude name="**/*resharper*/**/*" />
        <exclude name="**/*resharper*" />
      </fileset>
    </zip>

  </target>

  
  
  <!-- ****** Target: zip-full ****** -->
  <target name="zip-full" depends="bin" unless="${debug or target=='2.0'}">

    <delete if="${directory::exists('${bin_path_zip}')}">
      <fileset basedir="${bin_path_zip}">
        <include name="evolution-net-util*.zip" />
      </fileset>
    </delete>

    <zip zipfile="${bin_path_zip}\evolution-net-full-latest-src.zip">
      <fileset basedir="." prefix="">
        <include name="*.*" />
        <exclude name="*.txt" />
      </fileset>

      <fileset basedir="${src_path}" prefix="${src_path}">
        <include name="**/*" />

        <exclude name="log.txt" />
        <exclude name="**/bin/**/*" />
        <exclude name="**/obj/**/*" />
        <exclude name="**/*.suo" />
        <exclude name="**/*resharper*/**/*" />
        <exclude name="**/*resharper*" />
      </fileset>
    </zip>

  </target>



  <!-- ****** Target: ZIP ****** -->
  <target name="zip" depends="zip-mvp, zip-util, zip-full" unless="${debug or target=='2.0'}" />
    
  
  
  <!-- ****** Target: deploy-bin ****** -->
  <target name="deploy-bin" depends="bin">

    <mkdir dir="${deploy_path}" />

    <copy todir="${deploy_path}" flatten="true">
      <fileset basedir="${bin_path}">
        <include name="**/*.dll" />
        <include name="**/*.pdb" if="${debug}" />
      </fileset>
    </copy>

  </target>



  <!-- ****** Target: deploy-zip ****** -->
  <target name="deploy-zip" depends="zip">

    <mkdir dir="${deploy_path}" />

    <copy todir="${deploy_path}" flatten="true">
      <fileset basedir="${bin_path_zip}">
        <include name="*.zip" />
      </fileset>
    </copy>

  </target>



</project>